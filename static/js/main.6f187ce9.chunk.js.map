{"version":3,"sources":["helpers.js","components/Login.jsx","components/Logout.jsx","components/Notify.jsx","components/WhiteCircle.jsx","components/Devices.jsx","components/DevicesContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["doAjaxRequest","url","cachebust","headers","method","data","callback","xhr","XMLHttpRequest","open","Object","keys","forEach","key","setRequestHeader","onload","e","onerror","Error","send","Login","useState","email","setEmail","password","setPassword","error","setError","err","status","localStorage","setItem","responseText","window","location","reload","className","style","tabIndex","onChange","target","value","size","required","placeholder","type","onClick","JSON","stringify","Logout","removeItem","Notify","getItem","name","repoUrl","message","WhiteCircle","React","forwardRef","ref","index","numdevices","animationDelay","Math","floor","whiteCircleRef","useRef","useImperativeHandle","startAnimation","current","animationPlayState","Devices","devices","setDevices","useEffect","setTimeout","getDeviceData","devicesData","parse","circles","device","push","id","length","DevicesContainer","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6f187ce9.chunk.js","sourcesContent":["\nexport function doAjaxRequest(url, cachebust, headers, method, data, callback) {\n  let xhr = new XMLHttpRequest();\n  xhr.open(method, url, true);\n  if (!!headers) {\n    Object.keys(headers).forEach((key) => {\n      xhr.setRequestHeader(key, headers[key]);\n    });\n  }\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  xhr.onload = function (e) {\n    return callback(null, xhr);\n  };\n  xhr.onerror = function (e) {\n    return callback(new Error(), xhr);\n  };\n  xhr.send(data);  // doesn't seem to matter that data is null in the case of GET\n}\n\n\n\n","import React, {useEffect, useState} from \"react\";\nimport {doAjaxRequest} from \"../helpers\";\n\nconst Login = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState(null);\n  const url = \"http://35.201.2.209:8000/login\";\n\n  const onClick = () => {\n    setError(null);\n    if (password !== \"meld123\") {\n      setError(\"invalid password\");\n      return;\n    }\n    doAjaxRequest(url, false, {}, \"POST\", JSON.stringify({email, password}), callback);\n  };\n\n  const callback = (err, xhr) => {\n    setError(null);\n    if (xhr.status === 200) {\n      localStorage.setItem('authtoken', xhr.responseText);\n      return window.location.reload();\n    }\n    if (xhr.status === 401) {\n      localStorage.setItem('authtoken', null);\n      return;\n    }\n    setError(`error, server status code: ${xhr.status}`);\n  };\n\n  return (\n    <>\n    <style>\n      {`\n        .layer10 {\n            width: 100%;\n            height: 100%;\n            top: 0;\n            left: 0;\n            position: absolute;\n            z-index: 10;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        \n        .loginContainer {\n          display: flex; \n          order: 0;\n          flex: 0 1 auto;\n          align-self: center;\n          z-index: 100;\n          margin: 20px;\n          width: 300px;\n          height: 300px;\n          margin:50px;\n          padding:50px;\n          align-self: center;\n          align-items: center;\n          align-content: center;\n          justify-content: center;\n          text-align: center;\n        }\n\n        .loginButton {\n            margin: 0;\n            font-weight: 400;\n            text-align: center;\n            vertical-align: middle;\n            user-select: none;\n            border: 1px solid transparent;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            border-radius: .25rem;\n            color: #fff;\n            background-color: #343a40;\n            border-color: #343a40;\n            cursor: pointer;\n            }\n\n      `}\n    </style>\n      <div className=\"layer10\"\n           style={{\"backgroundColor\": \"#263138\"}}>\n        <div className=\"loginContainer\"\n             style={{\"backgroundColor\": \"#ffffff\", \"flexDirection\": \"column\"}}>\n\n          <div style={{\"fontSize\": \"2em\", \"color\": \"white\", \"display\": \"block\"}}>\n            <span style={{\"color\": \"#263138\", \"marginTop\": \"10px\"}}>\n              Login\n            </span>\n          </div>\n          <div style={{\"color\": \"white\", \"display\": \"block\"}}>\n            <input className=\"form-control\"\n                   tabIndex=\"1\"\n                   onChange={(e) => setEmail(e.target.value)}\n                   value={email}\n                   size={35}\n                   required\n                   style={{\"fontSize\": \"1.2em\", \"marginTop\": \"10px\", \"padding\": \"4px\"}}\n                   placeholder=\"Enter an email address\"\n                   type=\"email\"/>\n          </div>\n          <span style={{\"color\": \"#263138\", \"marginTop\": \"10px\"}}>\n            {error}\n          </span>\n          <div style={{\"fontSize\": \"1em\", \"color\": \"white\"}}>\n\n            <input onChange={(e) => setPassword(e.target.value)}\n                   value={password}\n                   tabIndex=\"2\"\n                   size={35}\n                   required\n                   style={{\"fontSize\": \"1.2em\", \"marginTop\": \"10px\", \"padding\": \"4px\"}}\n                   placeholder=\"Enter your password\"\n                   type=\"password\"/>\n          </div>\n          <div style={{\"fontSize\": \"1em\", \"color\": \"white\"}}>\n            <button type=\"button\"\n                    className=\"loginButton\"\n                    style={{\"fontSize\": \"1.2em\", \"marginTop\": \"10px\"}}\n                    onClick={onClick}>\n              LOG IN\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\n\nexport default Login;\n","import React from 'react';\n\nexport default function Logout() {\n\n  const onClick = () => {\n    localStorage.removeItem('authtoken');\n    window.location.reload();\n  };\n\n  return (\n    <>\n        <style>\n          {`\n            .logoutButton:hover {\n                cursor: pointer;\n            }\n\n            .logoutButton {\n                cursor: pointer;\n                margin: 0;\n                font-weight: 400;\n                text-align: center;\n                vertical-align: middle;\n                border: 1px solid transparent;\n                padding: .375rem .75rem;\n                font-size: 1rem;\n                line-height: 1.5;\n                border-radius: .25rem;\n                color: #fff;\n                background-color: #343a40;\n                border-color: #343a40;\n                }\n          `}\n        </style>\n      <span onClick={onClick}\n              className=\"logoutButton\">LOGOUT\n      </span>\n    </>\n  );\n}\n\n\n","import React, {useState} from 'react';\nimport {doAjaxRequest} from \"../helpers\";\n\nexport default function Notify() {\n  const [error, setError] = useState(null);\n  const url = \"http://35.201.2.209:8000/notifyX\";\n\n  const onClick = () => {\n    setError(null);\n    const headers = {\"Authorization\": `Bearer ${localStorage.getItem('authtoken')}`};\n    const postData = {\n      name: \"Andrew Stuart\",\n      email: \"andrewbstuart@gmail.com\",\n      repoUrl: \"https://github.com/bootrino/meldcx\",\n      message: \"this is alot more than 4 hours work\"\n    };\n    doAjaxRequest(url, false, headers, \"POST\", JSON.stringify(postData), callback);\n  };\n\n  const callback = (err, xhr) => {\n    setError(null);\n    if (xhr.status === 200) {\n      localStorage.setItem('authtoken', xhr.responseText);\n      return window.location.reload();\n    }\n    if (xhr.status === 401) {\n      localStorage.setItem('authtoken', null);\n      return;\n    }\n    setError(`error, server status code: ${xhr.status}`);\n  };\n\n  return (\n    <>\n      {error}\n      <style>\n          {`\n            .notifyButton {\n                margin: 0;\n                font-weight: 400;\n                text-align: center;\n                vertical-align: middle;\n                user-select: none;\n                border: 1px solid transparent;\n                padding: .375rem .75rem;\n                font-size: 1rem;\n                line-height: 1.5;\n                border-radius: .25rem;\n                color: #fff;\n                background-color: #343a40;\n                border-color: #343a40;\n                cursor: pointer;\n                }\n          `}\n        </style>\n      <span type=\"button\"\n              className=\"notifyButton\"\n              onClick={onClick}>\n        NOTIFY\n      </span>\n    </>\n  );\n}\n\n\n","import React, {useEffect, useState, useImperativeHandle} from \"react\";\n\n\nconst WhiteCircle = React.forwardRef(({index, numdevices}, ref) => {\n  let animationDuration = 3000;\n  let millisecondspercircle = Math.floor(animationDuration / (numdevices));\n  let animationDelay = millisecondspercircle * index;\n  const whiteCircleRef = React.useRef();\n\n  useImperativeHandle(ref, () => ({\n      startAnimation: () => whiteCircleRef.current.style.animationPlayState = \"running\"\n    })\n  );\n\n  return (\n    <>\n    <style>\n      {`\n        .layer30{\n            width: 100%;\n            height: 100%;\n            top: 0;\n            left: 0;\n            position: absolute;\n            z-index: 30;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .spinningcenteredcontainer {\n            z-index: 10;\n            margin: 20px;\n            width: 300px;\n            height: 300px;\n            animation-duration: ${animationDuration}ms;\n            animation-name: spin;\n            animation-timing-function: linear;\n            animation-play-state: paused;\n            margin:50px;\n            padding:50px;\n        }\n\n        .whiteCircle {\n            width:50px;\n            height:50px;\n            background:white;\n            border-radius:50%;\n        }\n\n      `}\n    </style>\n      <div className=\"layer30\">\n        <div className=\"spinningcenteredcontainer\"\n             ref={whiteCircleRef}\n             style={{\"animationDelay\": `-${animationDelay}ms`}}>\n          <div className=\"whiteCircle\"></div>\n        </div>\n      </div>\n    </>\n  );\n});\n\n\nexport default WhiteCircle;\n","import React, {useEffect, useState} from \"react\";\nimport {doAjaxRequest} from \"../helpers\";\nimport Logout from \"./Logout\";\nimport Notify from \"./Notify\";\nimport WhiteCircle from \"./WhiteCircle\";\n\nconst Devices = () => {\n  const [devices, setDevices] = useState([]);\n  const [error, setError] = useState(null);\n  const url = \"http://35.201.2.209:8000/devices\";\n\n  useEffect(() => {\n\n    const callback = (err, xhr) => {\n      setError(null);\n      setDevices([]);\n      setTimeout(getDeviceData, 5000);\n      if (xhr.status === 200) {\n        let devicesData = [];\n        try {\n          devicesData = JSON.parse(xhr.responseText)[\"devices\"];\n          setDevices(devicesData);\n        } catch (e) {\n          setError(`got a response, but unable to read the devices data: ${e} $devicesData}`);\n          setDevices([]);\n        }\n        return;\n      }\n      setError(`error getting devices, server status code: ${xhr.status}`);\n    };\n    const getDeviceData = () => doAjaxRequest(url, false, {}, \"GET\", null, callback);\n    getDeviceData();\n  }, []);\n\n  let circles = [];\n  devices.forEach(\n    (device, index) => {\n      circles.push(<WhiteCircle key={device.id}\n                                index={index}\n                                numdevices={devices.length}/>);\n    });\n\n  return (\n    <>\n    <style>\n      {`\n\n        .layer10 {\n            pointer-events: none; /* needed because if it overlays a button then button cannot be pressed */\n            width: 100%;\n            height: 100%;\n            top: 0;\n            left: 0;\n            position: absolute;\n            z-index: 10;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        \n        .layer20 {\n            pointer-events: none; /* needed because if it overlays a button then button cannot be pressed */\n            width: 100%;\n            height: 100%;\n            top: 0;\n            left: 0;\n            position: absolute;\n            z-index: 20;\n            display: flex;\n            align-self: center;\n            align-items: center;\n            align-content: center;\n            justify-content: center;\n        }\n\n        .deviceinfocontainer {\n            pointer-events: none; /* needed because if it overlays a button then button cannot be pressed */\n          display: flex; \n          order: 0;\n          flex: 0 1 auto;\n          align-self: center;\n          z-index: 100;\n          margin: 20px;\n          width: 300px;\n          height: 300px;\n          margin:50px;\n          padding:50px;\n          align-self: center;\n          align-items: center;\n          align-content: center;\n          justify-content: center;\n          text-align: center;\n        }\n\n        .animationcontainer {\n            pointer-events: none; /* needed because if it overlays a button then button cannot be pressed */\n            animation-duration: 4000ms;\n            animation-iteration-count: infinite;\n            animation-name: spin;\n            animation-timing-function: linear;\n            animation-play-state: running;\n        }\n\n        @keyframes spin {\n            from {\n                transform:rotate(0deg);\n            }\n            to {\n                transform:rotate(360deg);\n            }\n        }\n\n        \n      `}\n    </style>\n      <div className=\"layer10\">\n        <div className=\"deviceinfocontainer\"\n             style={{\"backgroundColor\": \"#ef7044\", \"flexDirection\": \"column\"}}>\n          <div style={{\"fontSize\": \"2em\", \"color\": \"white\", \"display\": \"block\"}}>{devices.length}</div>\n          <div style={{\"fontSize\": \"1em\", \"color\": \"white\"}}>DEVICES</div>\n          <div style={{\"fontSize\": \"1em\", \"color\": \"white\"}}>ONLINE</div>\n        </div>\n      </div>\n      <div className=\"layer20 animationcontainer\">\n        {circles}\n      </div>\n    </>\n  );\n};\n\n\nexport default Devices;\n","import React from \"react\";\nimport Devices from \"./Devices\";\nimport Logout from \"./Logout\";\nimport Notify from \"./Notify\";\n\nconst DevicesContainer = () => {\n    return (\n      <>\n        <style>\n          {`\n             .flex-container {\n                align-content: stretch;\n                align-items: stretch;\n                display: flex;\n                flex-direction: column;\n                flex-wrap: nowrap;\n                justify-content: flex-start;\n                align-content: center;\n                align-items: center;\n                align-self: center;\n                display: flex;\n                height: 100%;\n                justify-content: center;\n                left: 0;\n                position: absolute;\n                top: 0;\n                width: 100%;\n                z-index: 200;\n                background-color: gray;\n                }\n            \n            .top {\n                width: 100%;\n                order: 0;\n                flex: 1 1 auto;\n                align-self: auto;\n                background-color: #ef7044;\n                }\n            \n            .bottom {\n                width: 100%;\n                order: 0;\n                flex: 0 1 auto;\n                align-self: auto;\n                background-color: #d76845;\n                text-align: center;\n                padding: 20px;\n                }\n\n            .notifyButton {\n                margin: 0;\n                font-weight: 400;\n                text-align: center;\n                vertical-align: middle;\n                user-select: none;\n                border: 1px solid transparent;\n                padding: .375rem .75rem;\n                font-size: 1rem;\n                line-height: 1.5;\n                border-radius: .25rem;\n                color: #fff;\n                background-color: #343a40;\n                border-color: #343a40;\n                cursor: pointer;\n                }\n          `}\n        </style>\n        <div className=\"flex-container\">\n          <div className=\"top\">\n            <Devices/>\n          </div>\n          <div className=\"bottom\">\n            <Notify/>\n            &nbsp;\n            <Logout/>\n          </div>\n        </div>\n      </>\n    );\n  }\n;\n\n\nexport default DevicesContainer;\n","import React from 'react';\nimport Login from \"./components/Login\"\nimport DevicesContainer from \"./components/DevicesContainer\";\n\nfunction App() {\n  return (localStorage.getItem('authtoken') === null) ? <Login/> : <DevicesContainer/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}